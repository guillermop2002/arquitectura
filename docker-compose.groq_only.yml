# Docker Compose para Sistema de Verificación Arquitectónica - Solo Groq + Neo4j
# Versión: 1.0.0 - Sin APIs pagas

version: '3.8'

services:
  # Aplicación principal
  app:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: verificacion-app-groq
    ports:
      - "5000:5000"
    environment:
      - GROQ_API_KEY=${GROQ_API_KEY}
      - TESSERACT_CMD=/usr/bin/tesseract
      - POPPLER_PATH=/usr/bin
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=${NEO4J_URI}
      - NEO4J_USERNAME=${NEO4J_USERNAME}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - NEO4J_DATABASE=${NEO4J_DATABASE}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./analysis_results:/app/analysis_results
      - ./context_storage:/app/context_storage
      - ./normativa:/app/normativa:ro
    depends_on:
      - redis
      - neo4j
    networks:
      - verificacion-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis para caché y estado
  redis:
    image: redis:7-alpine
    container_name: verificacion-redis-groq
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - verificacion-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.14-community
    container_name: verificacion-neo4j-groq
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/password123
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - verificacion-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password123", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Rasa Conversational AI
  rasa:
    build:
      context: ./rasa_bot
      dockerfile: Dockerfile.rasa
    container_name: verificacion-rasa-groq
    ports:
      - "5005:5005"
    environment:
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password123
    volumes:
      - ./rasa_bot:/app
      - rasa_models:/app/models
    depends_on:
      - redis
      - neo4j
    networks:
      - verificacion-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/webhooks/rest/webhook"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: verificacion-nginx-groq
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
      - rasa
    networks:
      - verificacion-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: verificacion-prometheus-groq
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - verificacion-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: verificacion-grafana-groq
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - verificacion-network
    restart: unless-stopped

  # Logstash for centralized logging
  logstash:
    image: logstash:8.11.0
    container_name: verificacion-logstash-groq
    ports:
      - "5044:5044"
    volumes:
      - ./monitoring/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./logs:/var/log/app:ro
    depends_on:
      - redis
    networks:
      - verificacion-network
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  rasa_models:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  verificacion-network:
    driver: bridge
