# Dockerfile optimizado para Oracle Cloud ARM64
# Sistema de Verificación Arquitectónica

FROM python:3.10-slim

# Metadatos
LABEL maintainer="Sistema de Verificación Arquitectónica"
LABEL description="Sistema de verificación normativa con IA para proyectos de edificación"
LABEL version="1.0.0"

# Variables de entorno
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Instalar dependencias del sistema optimizadas para ARM64
RUN apt-get update && apt-get install -y \
    # OCR y procesamiento de imágenes
    tesseract-ocr \
    tesseract-ocr-spa \
    poppler-utils \
    libpoppler-cpp-dev \
    # OpenCV y visión por computador (optimizado para ARM64)
    libgl1-mesa-dri \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgthread-2.0-0 \
    libglib2.0-dev \
    libgtk-3-0 \
    libgtk-3-dev \
    libgstreamer1.0-0 \
    libgstreamer-plugins-base1.0-0 \
    libgstreamer-plugins-bad1.0-0 \
    libgstreamer1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    libgstreamer-plugins-bad1.0-dev \
    libavcodec-dev \
    libavformat-dev \
    libavutil-dev \
    libswscale-dev \
    libswresample-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libopenblas-dev \
    gfortran \
    # Procesamiento de PDFs
    libpoppler-dev \
    # Herramientas del sistema
    curl \
    wget \
    unzip \
    git \
    # Limpiar cache
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Crear usuario no-root para seguridad
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Establecer directorio de trabajo
WORKDIR /app

# Configurar directorio de caché de Matplotlib para evitar warnings
ENV MPLCONFIGDIR=/app/.config/matplotlib
RUN mkdir -p ${MPLCONFIGDIR} && chown -R appuser:appuser ${MPLCONFIGDIR}

# Copiar archivos de dependencias
COPY requirements.oracle_arm64.txt .

# Instalar dependencias de Python optimizadas para ARM64
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir --upgrade certifi && \
    pip install --no-cache-dir -r requirements.oracle_arm64.txt && \
    python -m spacy download es_core_news_sm

# --- Shim para sentence-transformers 2.2.2 con huggingface_hub>=0.13 ---
RUN python - <<'PY'
from pathlib import Path
import textwrap, importlib
pkg = Path(importlib.import_module('huggingface_hub').__file__).parent
shim = pkg / 'cached_download.py'
shim.write_text(textwrap.dedent("""
from huggingface_hub import hf_hub_download as _hf_hub_download

def cached_download(*args, **kwargs):
    # Mantener compat: sentence-transformers 2.2.2 llama a cached_download con args/kwargs variados.
    # hf_hub_download es compatible con kwargs comunes (repo_id, filename, revision, cache_dir, repo_type, etc.)
    return _hf_hub_download(*args, **kwargs)
"""))
print(f"[shim] Escrito: {shim}")
PY
# --- fin shim ---

# === Cache HF/Transformers en ruta escribible por appuser ===
ENV HF_HOME=/app/.cache/hf \
    HUGGINGFACE_HUB_CACHE=/app/.cache/hf \
    TRANSFORMERS_CACHE=/app/.cache/hf \
    SENTENCE_TRANSFORMERS_HOME=/app/.cache/sentence_transformers

RUN mkdir -p /app/.cache/hf /app/.cache/sentence_transformers && chown -R appuser:appuser /app/.cache

# Copiar código de la aplicación
COPY . .

# Crear directorios necesarios
RUN mkdir -p uploads temp logs reports analysis_results context_storage && \
    chown -R appuser:appuser /app

# Cambiar a usuario no-root
USER appuser

# Exponer puerto
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Comando de inicio
CMD ["python", "main.py"]